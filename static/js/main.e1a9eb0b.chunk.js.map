{"version":3,"sources":["current_floor_button.svg","closed_cage.svg","b0.svg","b1.svg","b2.svg","b3.svg","b4.svg","b5.svg","open_cage.svg","upButton.svg","downButton.svg","open_ elevator_img.jpg","ElevatorLocation.js","ElevatorAnimation.js","UpDownCommand.js","ElevatorCommands.js","Extern.js","InternPanel.js","Intern.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","divStyle","width","ElevatorLocation","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","floor","i","refs","style","opacity","react_default","a","createElement","src","b0","className","id","ref","currentFloor","b1","b2","b3","b4","b5","setCurrentLocation","locationData","elevatorPosition","Component","ElevatorAnimation","_this","wasPendingCall","_this2","Promise","resolve","setTimeout","openLift","_this3","closedLift","time","_this4","updateFromAnimation","animationData","callsToCollectUp","callsToCollectDown","pendingCalls","servedFloors","callsFromCommandsUp","callsFromCommandsDown","intServedFloors","includes","splice","indexOf","direction","list","Math","min","apply","toConsumableArray","max","_this5","newFloor","length","checkCalls","some","x","filter","removeCall","decideMove","updateDirection","moveUp","moveDown","closeElevatorDoor","all","openElevatorDoor","update","console","log","elevatorDirection","selectFloor","fetchNewInputs","display","myRow","position","UpDownCommand","handleClick","e","target","attributes","options","value","up","down","upButton","onClick","downButton","baseDown","remove","baseUp","upDownData","updateSwitchButton","alignItems","justifyContent","margin","ElevatorCommands","inputCommandsUp","inputCommandsDown","isTimer","src_UpDownCommand","commandsData","updateSwitchFromCommands","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","push","Number","startTimer","alert","collectNewInputs","stop","_x","_x2","arguments","_ref2","_callee2","_context2","_x3","_x4","_ref3","_callee3","_context3","_x5","_x6","_ref4","_callee4","_context4","_x7","_x8","_ref5","_callee5","_context5","_x9","_x10","_ref6","_callee6","_context6","_x11","_x12","updateFromCommands","Extern","newInputsUp","newInputsDown","startCollectTimer","commandCanSendNewInputs","animationCanImportNewInputs","receivedNewInputs","state","commandPushed","elevatorMoved","directionChanged","stillSomeCallsToResolve","propsChanged","receivedInputs","arr1","arr2","result","forEach","e1","e2","compare","callsList1","callsList2","mergedList","Set","concat","externData","src_ElevatorLocation","src_ElevatorAnimation","setMainDirection","setState","currentLocation","callsCollUp","callsCollDown","pending","fromCommandsUp","fromCommandsDown","internServedFloors","_i","mergeCalls","updateInternServedFloors","src_ElevatorCommands","setTimer","readyToGetPendingCalls","updateFromNewInputs","prevProps","prevState","snapshot","containerStyle","minWidth","backgroundColor","borderRadius","rowStyle","InternPanel","intServed","Intern","src_InternPanel","internPanelData","internData","updatePendingCalls","updateSwitchFromIntern","internServed","App","internInputCalls","internServedFloorsForIntern","0","1","2","3","4","5","internServedFloorsForAnimation","src_Extern","isReady","src_Intern","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e1a9eb0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/current_floor_button.047235ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/closed_cage.a5c7428c.svg\";","module.exports = __webpack_public_path__ + \"static/media/b0.0cfbf597.svg\";","module.exports = __webpack_public_path__ + \"static/media/b1.9477a1aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/b2.f24fdf25.svg\";","module.exports = __webpack_public_path__ + \"static/media/b3.41db1cc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/b4.706df9c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/b5.1b8dbff6.svg\";","module.exports = __webpack_public_path__ + \"static/media/open_cage.160db443.svg\";","module.exports = __webpack_public_path__ + \"static/media/upButton.36ee2498.svg\";","module.exports = __webpack_public_path__ + \"static/media/downButton.02afb3da.svg\";","module.exports = __webpack_public_path__ + \"static/media/open_ elevator_img.54a0bb59.jpg\";","import React, {Component} from 'react';\nimport currentFloor from './current_floor_button.svg';\nimport b0 from \"./b0.svg\";\nimport b1 from \"./b1.svg\";\nimport b2 from \"./b2.svg\";\nimport b3 from \"./b3.svg\";\nimport b4 from \"./b4.svg\";\nimport b5 from \"./b5.svg\";\n\nconst divStyle = {\n    width: '100%'\n};\n\nclass ElevatorLocation extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    setCurrentLocation(floor) {\n        // Switch all floor other than the current one\n        for (let i=0;i<6;i++) {\n            if (i === floor) { this.refs['highlighted' + floor].style.opacity = 0.5; }\n            else { this.refs['highlighted' + i].style.opacity = 0; }\n        }\n    }\n\n    render() {\n        return (\n            <header style={divStyle}>\n                <img src={b0} className=\"Floor-Button\" />\n                <img id={0} ref=\"highlighted0\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n                <img src={b1} className=\"Floor-Button\" />\n                <img id={1} ref=\"highlighted1\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n                <img src={b2} className=\"Floor-Button\" />\n                <img id={2} ref=\"highlighted2\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n                <img src={b3} className=\"Floor-Button\" />\n                <img id={3} ref=\"highlighted3\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n                <img src={b4} className=\"Floor-Button\" />\n                <img id={4} ref=\"highlighted4\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n                <img src={b5} className=\"Floor-Button\" />\n                <img id={5} ref=\"highlighted5\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n            </header>\n        );\n    }\n\n    componentDidMount() {\n        this.setCurrentLocation(this.props.locationData.elevatorPosition);\n\n    }\n\n    componentDidUpdate() {\n        this.setCurrentLocation(this.props.locationData.elevatorPosition);\n    }\n}\n\nexport default ElevatorLocation;","import React, {Component} from 'react';\nimport openLift from './open_cage.svg';\nimport closedLift from './closed_cage.svg';\n\nconst divStyle = {\n    width: '100%'\n};\n\nclass ElevatorAnimation extends Component {\n\n    constructor(props) {\n        super(props);\n        // Control variable to use when updating the elevator properties from the while-loop during a move (so that the move is not started again - due to the component update - before it ends)\n        this.wasPendingCall = false;\n    }\n\n    openElevatorDoor(floor) {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(this.refs['fl' + floor].src = openLift);\n            }, 1000);\n        });\n    }\n\n    closeElevatorDoor(floor) {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(this.refs['fl' + floor].src = closedLift);\n            }, 1000);\n        });\n    }\n\n    // Time in ms\n    update(time) {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(this.props.updateFromAnimation(this.props.animationData.elevatorPosition, this.props.animationData.callsToCollectUp,\n                                                       this.props.animationData.callsToCollectDown, this.props.animationData.pendingCalls, this.props.animationData.servedFloors,\n                                                       this.props.animationData.callsFromCommandsUp, this.props.animationData.callsFromCommandsDown,\n                                                       this.props.animationData.intServedFloors));\n            }, time);\n        });\n    }\n\n    removeCall(floor) {\n\n        // Remove call from all lists where it is included\n        if (this.props.animationData.callsToCollectUp.includes(floor)) {\n            this.props.animationData.callsToCollectUp.splice(this.props.animationData.callsToCollectUp.indexOf(floor), 1)\n        }\n\n        if (this.props.animationData.callsToCollectDown.includes(floor)) {\n            this.props.animationData.callsToCollectDown.splice(this.props.animationData.callsToCollectDown.indexOf(floor), 1)\n        }\n\n        if (this.props.animationData.pendingCalls.includes(floor)) {\n            this.props.animationData.pendingCalls.splice(this.props.animationData.pendingCalls.indexOf(floor), 1)\n\n            this.wasPendingCall = true;\n        }\n\n        if (this.props.animationData.callsFromCommandsUp.includes(floor)) {\n            this.props.animationData.callsFromCommandsUp.splice(this.props.animationData.callsFromCommandsUp.indexOf(floor), 1)\n        }\n\n        if (this.props.animationData.callsFromCommandsDown.includes(floor)) {\n            this.props.animationData.callsFromCommandsDown.splice(this.props.animationData.callsFromCommandsDown.indexOf(floor), 1)\n        }\n    }\n\n    checkCalls(direction, list) {\n\n        let call\n\n        if (direction === \"up\") { call = Math.min(...list); }\n        else { call = Math.max(...list); }\n\n        return call;\n    }\n\n    selectFloor(direction) {\n\n        this.wasPendingCall = false; // Needed to switch off intern buttons\n\n        let newFloor = null;\n\n        // Remove current location from any list (safety check)\n        // this.removeCall(this.props.animationData.elevatorPosition); //todo dangerous?\n\n        if (direction === \"up\") {\n\n            // Check up-calls\n            if (this.props.animationData.callsToCollectUp.length > 0) {\n\n                newFloor = this.checkCalls(direction, this.props.animationData.callsToCollectUp);\n            }\n            // If no up-calls, check pending calls above current floor\n            else if (this.props.animationData.pendingCalls.length > 0 && this.props.animationData.pendingCalls.some(x => x >= this.props.animationData.elevatorPosition)) {\n\n                newFloor = this.checkCalls(direction, this.props.animationData.pendingCalls.filter(x => x >= this.props.animationData.elevatorPosition))\n            }\n            // If no-above pending calls, check down-calls above current floor\n            else if (this.props.animationData.callsToCollectDown.length > 0 && this.props.animationData.callsToCollectDown.some(x => x >= this.props.animationData.elevatorPosition)) {\n                newFloor = this.checkCalls(direction, this.props.animationData.callsToCollectDown.filter(x => x >= this.props.animationData.elevatorPosition))\n            }\n\n            // Check if there are pending calls between the current and the target floor\n            if (this.props.animationData.pendingCalls.length > 0\n                && this.props.animationData.pendingCalls.some(x => x <= newFloor && x >= this.props.animationData.elevatorPosition)) {\n\n                newFloor = Math.min(...this.props.animationData.pendingCalls.filter(x => x <= newFloor && x >= this.props.animationData.elevatorPosition))\n            }\n\n        } else {\n\n            // Check down-calls\n            if (this.props.animationData.callsToCollectDown.length > 0) {\n                newFloor = this.checkCalls(direction, this.props.animationData.callsToCollectDown);\n\n            }\n            // If no down-calls, check pending calls below current floor\n            else if (this.props.animationData.pendingCalls.length > 0 && this.props.animationData.pendingCalls.some(x => x <= this.props.animationData.elevatorPosition)) {\n                newFloor = this.checkCalls(direction, this.props.animationData.pendingCalls.filter(x => x <= this.props.animationData.elevatorPosition));\n\n            }\n            // If no-below pending calls, check up-calls below current floor\n            else if (this.props.animationData.callsToCollectUp.length > 0 && this.props.animationData.callsToCollectUp.some(x => x <= this.props.animationData.elevatorPosition)) {\n                newFloor = this.checkCalls(direction, this.props.animationData.callsToCollectUp.filter(x => x <= this.props.animationData.elevatorPosition));\n\n            }\n\n            // Check if there are pending calls between the current and the target floor\n            if (this.props.animationData.pendingCalls.length > 0\n                && this.props.animationData.pendingCalls.some(x => x >= newFloor && x <= this.props.animationData.elevatorPosition)) {\n\n                newFloor = Math.max(...this.props.animationData.pendingCalls.filter(x => x >= newFloor && x <= this.props.animationData.elevatorPosition))\n            }\n\n        }\n\n        // If valid newFloor, move otherwise change direction and resolve other calls\n        if ([0,1,2,3,4,5].includes(newFloor)) {\n            // Remove element from every list it is in\n            this.removeCall(newFloor);\n            this.decideMove(direction, newFloor);\n        } else {\n            this.props.updateDirection();\n        }\n    }\n\n    decideMove(direction, floor) {\n\n        // Stop move if new floor is the same as the current floor\n        if (floor === this.props.animationData.elevatorPosition) {\n\n            // Remove floor need also its button to be switched off\n            this.props.animationData.servedFloors[floor] = 1;\n            if (this.wasPendingCall) { this.props.animationData.intServedFloors[floor] = 1;}\n\n            this.props.updateFromAnimation(floor, this.props.animationData.callsToCollectUp, this.props.animationData.callsToCollectDown,\n                                           this.props.animationData.pendingCalls, this.props.animationData.servedFloors,\n                                           this.props.animationData.callsFromCommandsUp, this.props.animationData.callsFromCommandsDown,\n                                           this.props.animationData.intServedFloors)\n        }\n\n        else if (direction === \"up\") { this.moveUp(floor) }\n\n        else  if (direction === \"down\") { this.moveDown(floor) }\n\n    }\n\n    async moveUp(floor) {\n        // Close current floor\n\n        await this.closeElevatorDoor(this.props.animationData.elevatorPosition);\n\n        // Set new floor to current position\n        this.props.animationData.elevatorPosition = floor;\n\n\n        // Remove floor need also its buttons to be switched off\n        this.props.animationData.servedFloors[floor] = 1;\n        if (this.wasPendingCall) { this.props.animationData.intServedFloors[floor] = 1;}\n\n        await Promise.all([this.openElevatorDoor(floor), this.update(1000)]);\n    }\n\n    async moveDown(floor) {\n\n        // Close current floor\n\n        await this.closeElevatorDoor(this.props.animationData.elevatorPosition);\n\n        // Set new floor to current position\n        this.props.animationData.elevatorPosition = floor;\n\n        // Remove floor need also its button to be switched off\n        this.props.animationData.servedFloors[floor] = 1;\n        if (this.wasPendingCall) { this.props.animationData.intServedFloors[floor] = 1;}\n\n\n        await Promise.all([this.openElevatorDoor(floor), this.update(1000)]);\n}\n\n    render() {\n        return (\n            <header style={divStyle}>\n                <img id=\"0\" ref=\"fl0\" src={closedLift} className=\"Elevator-img\" />\n                <img id=\"1\" ref=\"fl1\" src={closedLift} className=\"Elevator-img\" />\n                <img id=\"2\" ref=\"fl2\" src={closedLift} className=\"Elevator-img\" />\n                <img id=\"3\" ref=\"fl3\" src={closedLift} className=\"Elevator-img\" />\n                <img id=\"4\" ref=\"fl4\" src={closedLift} className=\"Elevator-img\" />\n                <img id=\"5\" ref=\"fl5\" src={closedLift} className=\"Elevator-img\" />\n\n            </header>\n        );\n    }\n\n    componentDidMount() {\n        this.refs['fl' + this.props.animationData.elevatorPosition].src = openLift\n    }\n\n    componentDidUpdate() {\n\n        // Safety check to avoid infinite loops\n        if (this.props.animationData.pendingCalls.length > 0\n            || this.props.animationData.callsToCollectUp.length > 0\n            || this.props.animationData.callsToCollectDown.length > 0) {\n\n            console.log(\"dir \" + this.props.animationData.elevatorDirection);\n            this.selectFloor(this.props.animationData.elevatorDirection);\n        }\n\n        if(this.props.fetchNewInputs) {\n\n            this.props.updateFromAnimation(this.props.animationData.elevatorPosition, this.props.animationData.callsToCollectUp,\n                this.props.animationData.callsToCollectDown, this.props.animationData.pendingCalls, this.props.animationData.servedFloors,\n                this.props.animationData.callsFromCommandsUp, this.props.animationData.callsFromCommandsDown, this.props.animationData.intServedFloors)\n\n        }\n    }\n\n}\n\nexport default ElevatorAnimation;","import React, {Component} from 'react';\nimport upButton from \"./upButton.svg\";\nimport downButton from './downButton.svg';\nimport currentFloor from './current_floor_button.svg';\n\nconst divStyle = {\n    display: 'inline-block',\n    width: '15%'\n};\n\nconst myRow = {\n    position: 'relative',\n};\n\n// todo: meglio togliere le classi dal css e mettere gli stili dei tre bottoni (down up e highlighted) qui?\n\nclass UpDownCommand extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    handleClick = e => {\n        if(e.target.attributes.options.value === \"up\") {\n            // Switch on button\n            this.refs.up.style.opacity = 0.5; // todo: c'è un modo più elegante con set() ?\n\n        } else {\n            // Switch on button\n            this.refs.down.style.opacity = 0.5; // todo: c'è un modo più elegante con set() ?\n        }\n\n        // Update parent component\n        this.props.update(e.target.attributes.options.value, this.props.id);\n    }\n\n    render() {\n        return (\n            <header style={divStyle}>\n                    <div style={myRow}>\n                        <img ref=\"baseUp\" src={upButton} className=\"Up-Button\"/>\n                        <img ref=\"up\" src={currentFloor} className=\"Highlighted-Up-Button\" options=\"up\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                    </div>\n                    <div style={myRow}>\n                        <img ref=\"baseDown\" src={downButton} className=\"Down-Button\"/>\n                        <img ref=\"down\" src={currentFloor} className=\"Highlighted-Down-Button\" options=\"down\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                    </div>\n            </header>\n        );\n    }\n\n    componentDidMount() {\n\n        // Floors 0 and 5 have only one direction options\n        switch (this.props.id) {\n            case 0:\n                this.refs.baseDown.remove();\n                this.refs.down.remove();\n                break\n            case 5:\n                this.refs.baseUp.remove();\n                this.refs.up.remove();\n                break\n        }\n\n        // Switch floors on call\n        if (this.props.upDownData.callsToCollectUp.includes(this.props.id)) { this.refs.up.style.opacity = 0.5; }\n        if (this.props.upDownData.callsToCollectDown.includes(this.props.id)) { this.refs.down.style.opacity = 0.5; }\n    }\n\n    componentDidUpdate() {\n\n        // Switch off served floors\n        if (this.props.upDownData.servedFloors[this.props.id]) {\n\n            // Floors 0 and 5 have only one direction options\n            switch (this.props.id) {\n                case 0:\n                    this.refs.up.style.opacity = 0\n                    break\n                case 5:\n                    this.refs.down.style.opacity = 0\n                    break\n                default:\n                    this.refs.up.style.opacity = 0;\n                    this.refs.down.style.opacity = 0;\n            }\n\n            this.props.upDownData.servedFloors[this.props.id] = 0;\n            this.props.updateSwitchButton(this.props.upDownData.servedFloors);\n        }\n    }\n}\n\nexport default UpDownCommand;","import React, {Component} from 'react';\nimport UpDownCommand from './UpDownCommand'; // name of imported component must match the component class name !\n\nconst myRow = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    margin: \"0px\"\n};\n\nconst divStyle = {\n    width: '100%'\n};\n\nclass ElevatorCommands extends Component {\n\n    constructor(props) {\n        super(props);\n        this.inputCommandsUp = [];\n        this.inputCommandsDown = [];\n        this.isTimer = true;\n        this.time = 5000;\n    }\n\n        render() {\n        // todo se definisco come class App-header prende quelle caratteristiche\n        return (\n            <header style={divStyle}>\n                    <div className=\"row\" style={myRow}>\n                        <UpDownCommand id={0} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                       this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                        <UpDownCommand id={1} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                        <UpDownCommand id={2} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                        <UpDownCommand id={3} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                        <UpDownCommand id={4} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                        <UpDownCommand id={5} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                    </div>\n            </header>\n        );\n    }\n\n    update() {\n\n        this.props.updateFromCommands(this.inputCommandsUp, this.inputCommandsDown)\n        this.inputCommandsUp = [];\n        this.inputCommandsDown = [];\n        this.isTimer = true;\n    }\n\n    collectNewInputs() {\n\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(this.update());\n            }, this.time);\n        });\n    }\n}\n\nexport default ElevatorCommands;","import React, {Component} from 'react';\nimport ElevatorLocation from './ElevatorLocation';\nimport ElevatorAnimation from './ElevatorAnimation';\nimport ElevatorCommands from './ElevatorCommands';\nimport openLift from \"./open_ elevator_img.jpg\";\n\nclass Extern extends Component {\n\n    constructor(props) {\n        super(props);\n        this.newInputsUp = [];\n        this.newInputsDown = [];\n        this.startCollectTimer = true;\n        this.commandCanSendNewInputs = false;\n        this.animationCanImportNewInputs = false;\n        this.receivedNewInputs = false;\n        this.state = {commandPushed: 0,\n                      elevatorMoved: 0,\n                      directionChanged: 0,\n                      stillSomeCallsToResolve: 0,\n                      propsChanged: 0,\n                      receivedInputs: false\n                     };\n    }\n\n    compare(arr1,arr2) {\n\n        if(!arr1  || !arr2) return;\n\n        let result;\n\n        arr1.forEach((e1, i ) => arr2.forEach (e2 => {\n\n                if(e1.length > 1 && e2.length){\n                    result = this.compare(e1,e2);\n                }else if(e1 !== e2 ){\n                    result = false\n                }else{\n                    result = true\n                }\n            })\n        )\n\n        return result\n\n    }\n\n    mergeCalls(callsList1, callsList2) {\n\n        let mergedList = [...new Set([...callsList1, ...callsList2])];\n\n        console.log(\"merge\")\n\n        return mergedList;\n    }\n\n    setMainDirection() {\n\n        // Invert direction when no more callsToCollect or pendingCalls above/below current position\n        if (this.props.externData.elevatorDirection === \"up\"\n            && (!this.props.externData.pendingCalls.some(x => x > this.props.externData.elevatorPosition)\n            && !this.props.externData.callsToCollectUp.some(x => x > this.props.externData.elevatorPosition)\n            && !this.props.externData.callsToCollectDown.some(x => x > this.props.externData.elevatorPosition))) {\n\n            this.props.externData.elevatorDirection = \"down\";\n            return;\n        }\n\n        if (this.props.externData.elevatorDirection === \"down\"\n            && (!this.props.externData.pendingCalls.some(x => x < this.props.externData.elevatorPosition)\n            && !this.props.externData.callsToCollectUp.some(x => x < this.props.externData.elevatorPosition)\n            && !this.props.externData.callsToCollectDown.some(x => x < this.props.externData.elevatorPosition))) {\n\n            this.props.externData.elevatorDirection = \"up\";\n            return;\n        }\n\n        // Change when extremes are reached\n        if(this.props.externData.elevatorPosition === 5) { this.props.externData.elevatorDirection = \"down\"; }\n        if(this.props.externData.elevatorPosition === 0) { this.props.externData.elevatorDirection = \"up\"; }\n\n        console.log(\"set dir \" + this.props.externData.elevatorDirection);\n\n    }\n\n    render() {\n        return (\n            <header className=\"App-body\">\n                <ElevatorLocation className=\"Extern-Component\" locationData={this.props.externData} />\n                <ElevatorAnimation className=\"Extern-Component\" animationData={this.props.externData}\n                                   fetchNewInputs={this.animationCanImportNewInputs}\n                                   updateDirection={() => { this.setMainDirection(); this.setState({directionChanged: !this.state.directionChanged}); }}\n                                   updateFromAnimation = {async (currentLocation, callsCollUp, callsCollDown, pending,\n                                                                 servedFloors, fromCommandsUp, fromCommandsDown, internServedFloors) =>\n                                    {\n                                       this.props.externData.elevatorPosition = currentLocation;\n\n                                        console.log(this.props.externData.callsFromCommandsDown);\n\n                                        // Get new inputs from external commands\n                                        if (this.animationCanImportNewInputs) {\n\n                                            // In case the user starts a query before the previous is finished, remove the calls that were already served by the previous call\n                                                for (let i=0; i < this.newInputsUp.length; i++ ) {\n                                                    if (servedFloors[this.newInputsUp[i]]) {\n                                                        this.newInputsUp.splice(i, 1)\n                                                    }\n                                                }\n\n                                                for (let i=0; i < this.newInputsDown.length; i++ ) {\n                                                    if (servedFloors[this.newInputsDown[i]]) {\n                                                        this.newInputsDown.splice(i, 1)\n                                                    }\n                                                }\n\n                                            this.animationCanImportNewInputs= false\n                                            this.receivedNewInputs = true\n\n                                            // Merge calls from commands (without calls already served) with the calls from the new inputs\n                                            this.props.externData.callsFromCommandsUp = this.mergeCalls(fromCommandsUp, this.newInputsUp)\n                                            this.props.externData.callsFromCommandsDown = this.mergeCalls(fromCommandsDown, this.newInputsDown)\n                                        }\n\n                                       // New lists of calls to collect are the merge of calls from commands and calls from animation\n                                       this.props.externData.callsToCollectUp = this.mergeCalls(callsCollUp, this.props.externData.callsFromCommandsUp)\n                                       this.props.externData.callsToCollectDown = this.mergeCalls(callsCollDown, this.props.externData.callsFromCommandsDown)\n\n                                       // Merge pending calls (without calls already served) with the pending calls from the internal inputs\n                                        this.props.externData.pendingCalls = this.mergeCalls(pending, this.props.externData.pendingCalls)\n\n                                       this.setMainDirection();\n                                       this.props.updateInternServedFloors(internServedFloors, servedFloors)\n                                    }} />\n                <ElevatorCommands className=\"Extern-Component\" commandsData={this.props.externData}\n                                  updateSwitchFromCommands={(servedFloors) => {  this.props.externData.servedFloors = servedFloors}}\n                                  startTimer={this.startCollectTimer}\n                                  setTimer={(isTimer) => {this.startCollectTimer = isTimer}}\n                                  updateFromCommands={async (inputCommandsUp, inputCommandsDown) => {\n\n                                      this.newInputsUp = inputCommandsUp\n                                      this.newInputsDown = inputCommandsDown\n\n                                      console.log(this.newInputsUp);\n                                      console.log(this.newInputsDown);\n\n                                      this.startCollectTimer = false;\n                                      this.commandCanSendNewInputs = true;\n\n                                      alert(\"Start resolution of your combination :)\")\n\n                                      this.setState({receivedInputs: !this.state.receivedInputs})\n                                  }\n                                  }/>\n            </header>\n        );\n    }\n\n    async componentDidMount() {\n\n        this.setMainDirection()\n        this.setState({directionChanged: !this.state.directionChanged});\n    }\n\n    updateFromNewInputs() {\n        this.animationCanImportNewInputs = true\n        this.props.readyToGetPendingCalls(true);\n    }\n\n    getNewInputs() {\n        return new Promise(resolve => {\n            setTimeout(() => {\n\n                resolve(this.updateFromNewInputs());\n            }, 15000);\n        });\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n\n\n        // Start timer next time user click\n        if (this.receivedNewInputs) { this.receivedNewInputs = false; this.startCollectTimer = true; }\n\n        // Command received new input lists than can be send to animation\n        if(this.commandCanSendNewInputs) {\n            this.commandCanSendNewInputs = false;\n            //await this.getNewInputs();\n            this.updateFromNewInputs()\n        }\n    }\n}\n\nexport default Extern;","import React, {Component} from 'react';\nimport b0 from \"./b0.svg\";\nimport b1 from \"./b1.svg\";\nimport b2 from \"./b2.svg\";\nimport b3 from \"./b3.svg\";\nimport b4 from \"./b4.svg\";\nimport b5 from \"./b5.svg\";\nimport currentFloor from \"./current_floor_button.svg\";\n\nconst containerStyle = {\n    position: 'relative',\n    minWidth: \"30%\", // todo: manually come si fa a farlo automatico? 100% che dovrebbe essere la width del parent non funziona\n    backgroundColor: '#4F5766',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: '7%'\n};\n\nconst rowStyle = {\n    alignItems: 'center',\n    justifyContent: 'center',\n};\n\nclass InternPanel extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    handleClick = e => {\n\n        // Switch on button\n        this.refs['highlighted' + e.target.id].style.opacity = 0.5 // todo: c'è un modo più elegante con set() ?\n\n        // Update parent component\n        this.props.update(e.target.id);\n    }\n\n    render() {\n        return (\n            <header>\n                <div className=\"container-fluid\" style={containerStyle}>\n                    <div className=\"row\" style={rowStyle}>\n                        <img src={b4} className=\"Panel-Button\" />\n                        <img id={4} ref=\"highlighted4\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                        <img src={b5} className=\"Panel-Button\" />\n                        <img id={5} ref=\"highlighted5\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                    </div>\n                    <div className=\"row\" style={rowStyle}>\n                        <img src={b2} className=\"Panel-Button\" />\n                        <img id={2} ref=\"highlighted2\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                        <img src={b3} className=\"Panel-Button\" />\n                        <img id={3} ref=\"highlighted3\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n\n                    </div>\n                    <div className=\"row\" style={rowStyle}>\n                        <img src={b0} className=\"Panel-Button\" />\n                        <img id={0} ref=\"highlighted0\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                        <img src={b1} className=\"Panel-Button\" />\n                        <img id={1} ref=\"highlighted1\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n\n                    </div>\n                </div>\n            </header>\n        );\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n        // Switch off served floors\n        for (let i=0; i<6; i++) {\n            if (this.props.intServed[i]) {\n                this.refs['highlighted' + i].style.opacity = 0;\n                this.props.intServed[i] = 0;\n            }\n        }\n\n        this.props.updateSwitchButton(this.props.intServed);\n    }\n}\n\nexport default InternPanel;","import React, {Component} from 'react';\nimport InternPanel from './InternPanel';\n\nclass Intern extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <header className=\"App-body\">\n                <div className=\"myParagraph\"> Start the simulation by calling the elevator from the extern, at any floor. Specify any combination of calls and enjoy the resulting motion...</div>\n                <InternPanel internPanelData={this.props.internData} update={(id) => { this.props.updatePendingCalls(id) }}\n                             updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromIntern(servedFloors) }}\n                             intServed={this.props.internServed} />\n            </header>\n        );\n    }\n}\n\nexport default Intern;","import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React, { Component } from 'react';\nimport './App.css';\nimport Extern from './Extern';\nimport Intern from './Intern';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.internInputCalls = [];\n        this.internServedFloorsForIntern = {0: null, 1: null, 2: null, 3: null, 4: null, 5: null};\n        this.internServedFloorsForAnimation = {0: null, 1: null, 2: null, 3: null, 4: null, 5: null};\n        // Set initial state\n        this.state = {\n            elevatorPosition: 0,\n            elevatorDirection: \"up\", // default direction is UP\n            pendingCalls: [],\n            callsToCollectUp: [],\n            callsToCollectDown: [],\n            callsFromCommandsUp: [],\n            callsFromCommandsDown: [],\n            servedFloors: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null}, // dictionary floors (id: ifServed) -> 0 means yes (switch off) / 1 means no (switch on)\n            intServedFloors: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null}\n        };\n    }\n\n    render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Elevator Simulation\n        </header>\n        <div className=\"App-body\">\n          <div className=\"container-fluid\">\n            <div className=\"row row-eq-height\">\n              <div className=\"col-sm-7\">\n                <Extern externData={this.state} readyToGetPendingCalls={ (isReady) => { if (isReady) {\n                                                                                             this.setState({pendingCalls: this.internInputCalls})\n                                                                                       }\n                                    }}\n                        updateInternServedFloors={(internServedFloors, servedFloors) => {\n\n                            // Check which pendingCall has been served\n                            this.internServedFloorsForIntern = internServedFloors;\n                            this.setState({servedFloors: servedFloors, internServedFloors: this.internServedFloorsForAnimation })\n\n                        }} />\n              </div>\n              <div className=\"col-sm-5\">\n                <Intern internData={this.state} updatePendingCalls={(id) => { // Get input calls from intern panel\n                                                                              if (this.internInputCalls.indexOf(Number(id)) < 0) {\n                                                                              this.internInputCalls.push(Number(id)) }}}\n                        updateSwitchFromIntern={(servedFloors) => { this.internServedFloorsForAnimation = servedFloors }}\n                        internServed={this.internServedFloorsForIntern}/>\n              </div>\n            </div>\n          </div>\n        </div>\n        <span className=\"App-footer\">\n            Created by Francesca Monzeglio within a Discrete Event Systems Project\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}