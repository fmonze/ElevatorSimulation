{"version":3,"sources":["current_floor_button.svg","closed_cage.svg","b0.svg","b1.svg","b2.svg","b3.svg","b4.svg","b5.svg","open_cage.svg","upButton.svg","downButton.svg","open_ elevator_img.jpg","ElevatorLocation.js","ElevatorAnimation.js","UpDownCommand.js","ElevatorCommands.js","Extern.js","InternPanel.js","Intern.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","divStyle","width","ElevatorLocation","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","floor","i","refs","style","opacity","react_default","a","createElement","src","b0","className","id","ref","currentFloor","b1","b2","b3","b4","b5","setCurrentLocation","locationData","elevatorPosition","Component","ElevatorAnimation","_this","wasPendingCall","_this2","Promise","resolve","setTimeout","console","log","openLift","_this3","closedLift","time","_this4","updateFromAnimation","animationData","callsToCollectUp","callsToCollectDown","pendingCalls","servedFloors","callsFromCommandsUp","callsFromCommandsDown","intServedFloors","includes","splice","indexOf","direction","list","Math","min","apply","toConsumableArray","max","_this5","newFloor","length","checkCalls","some","x","filter","removeCall","decideMove","updateDirection","moveUp","moveDown","closeElevatorDoor","all","openElevatorDoor","update","elevatorDirection","selectFloor","fetchNewInputs","padding","myRow","position","UpDownCommand","handleClick","e","target","attributes","options","value","up","down","upButton","onClick","downButton","baseDown","remove","baseUp","upDownData","updateSwitchButton","display","alignItems","justifyContent","ElevatorCommands","inputCommandsUp","inputCommandsDown","isTimer","src_UpDownCommand","commandsData","updateSwitchFromCommands","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","push","Number","startTimer","alert","collectNewInputs","stop","_x","_x2","arguments","_ref2","_callee2","_context2","_x3","_x4","_ref3","_callee3","_context3","_x5","_x6","_ref4","_callee4","_context4","_x7","_x8","_ref5","_callee5","_context5","_x9","_x10","_ref6","_callee6","_context6","_x11","_x12","updateFromCommands","Extern","newInputsUp","newInputsDown","startCollectTimer","commandCanSendNewInputs","animationCanImportNewInputs","receivedNewInputs","state","commandPushed","elevatorMoved","directionChanged","stillSomeCallsToResolve","propsChanged","receivedInputs","arr1","arr2","result","forEach","e1","e2","compare","callsList1","callsList2","mergedList","Set","concat","externData","src_ElevatorLocation","src_ElevatorAnimation","setMainDirection","setState","currentLocation","callsCollUp","callsCollDown","pending","fromCommandsUp","fromCommandsDown","internServedFloors","_i","mergeCalls","updateInternServedFloors","src_ElevatorCommands","setTimer","readyToGetPendingCalls","updateFromNewInputs","prevProps","prevState","snapshot","rowStyle","containerStyle","minWidth","backgroundColor","InternPanel","intServed","Intern","src_InternPanel","internPanelData","internData","updatePendingCalls","updateSwitchFromIntern","internServed","App","internInputCalls","internServedFloorsForIntern","0","1","2","3","4","5","internServedFloorsForAnimation","src_Extern","isReady","src_Intern","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.8603bea3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/current_floor_button.047235ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/closed_cage.a5c7428c.svg\";","module.exports = __webpack_public_path__ + \"static/media/b0.0cfbf597.svg\";","module.exports = __webpack_public_path__ + \"static/media/b1.9477a1aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/b2.f24fdf25.svg\";","module.exports = __webpack_public_path__ + \"static/media/b3.41db1cc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/b4.706df9c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/b5.1b8dbff6.svg\";","module.exports = __webpack_public_path__ + \"static/media/open_cage.160db443.svg\";","module.exports = __webpack_public_path__ + \"static/media/upButton.36ee2498.svg\";","module.exports = __webpack_public_path__ + \"static/media/downButton.02afb3da.svg\";","module.exports = __webpack_public_path__ + \"static/media/open_ elevator_img.54a0bb59.jpg\";","import React, {Component} from 'react';\nimport currentFloor from './current_floor_button.svg';\nimport b0 from \"./b0.svg\";\nimport b1 from \"./b1.svg\";\nimport b2 from \"./b2.svg\";\nimport b3 from \"./b3.svg\";\nimport b4 from \"./b4.svg\";\nimport b5 from \"./b5.svg\";\n\nconst divStyle = {\n\n    width: '100%'\n};\n\nclass ElevatorLocation extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    setCurrentLocation(floor) {\n        // Switch all floor other than the current one\n        for (let i=0;i<6;i++) {\n            if (i === floor) { this.refs['highlighted' + floor].style.opacity = 0.5; }\n            else { this.refs['highlighted' + i].style.opacity = 0; }\n        }\n    }\n\n    render() {\n        return (\n            <header style={divStyle}>\n                <img src={b0} className=\"Floor-Button\" />\n                <img id={0} ref=\"highlighted0\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n                <img src={b1} className=\"Floor-Button\" />\n                <img id={1} ref=\"highlighted1\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n                <img src={b2} className=\"Floor-Button\" />\n                <img id={2} ref=\"highlighted2\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n                <img src={b3} className=\"Floor-Button\" />\n                <img id={3} ref=\"highlighted3\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n                <img src={b4} className=\"Floor-Button\" />\n                <img id={4} ref=\"highlighted4\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n                <img src={b5} className=\"Floor-Button\" />\n                <img id={5} ref=\"highlighted5\" src={currentFloor} className=\"Highlighted-Floor-Button\" />\n            </header>\n        );\n    }\n\n    componentDidMount() {\n        this.setCurrentLocation(this.props.locationData.elevatorPosition);\n\n    }\n\n    componentDidUpdate() {\n        this.setCurrentLocation(this.props.locationData.elevatorPosition);\n    }\n}\n\nexport default ElevatorLocation;","import React, {Component} from 'react';\nimport openLift from './open_cage.svg';\nimport closedLift from './closed_cage.svg';\n\nconst divStyle = {\n\n};\n\nclass ElevatorAnimation extends Component {\n\n    constructor(props) {\n        super(props);\n        // Control variable to use when updating the elevator properties from the while-loop during a move (so that the move is not started again - due to the component update - before it ends)\n        this.wasPendingCall = false;\n    }\n\n    openElevatorDoor(floor) {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                console.log(\"open \" + floor);\n                resolve(this.refs['fl' + floor].src = openLift);\n            }, 1000);\n        });\n    }\n\n    closeElevatorDoor(floor) {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                console.log(\"close \" + floor);\n                resolve(this.refs['fl' + floor].src = closedLift);\n            }, 1000);\n        });\n    }\n\n    // Time in ms\n    update(time) {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(this.props.updateFromAnimation(this.props.animationData.elevatorPosition, this.props.animationData.callsToCollectUp,\n                                                       this.props.animationData.callsToCollectDown, this.props.animationData.pendingCalls, this.props.animationData.servedFloors,\n                                                       this.props.animationData.callsFromCommandsUp, this.props.animationData.callsFromCommandsDown,\n                                                       this.props.animationData.intServedFloors));\n            }, time);\n        });\n    }\n\n    removeCall(floor) {\n\n        // Remove call from all lists where it is included\n        if (this.props.animationData.callsToCollectUp.includes(floor)) {\n            this.props.animationData.callsToCollectUp.splice(this.props.animationData.callsToCollectUp.indexOf(floor), 1)\n        }\n\n        if (this.props.animationData.callsToCollectDown.includes(floor)) {\n            this.props.animationData.callsToCollectDown.splice(this.props.animationData.callsToCollectDown.indexOf(floor), 1)\n        }\n\n        if (this.props.animationData.pendingCalls.includes(floor)) {\n            this.props.animationData.pendingCalls.splice(this.props.animationData.pendingCalls.indexOf(floor), 1)\n\n            this.wasPendingCall = true;\n        }\n\n        if (this.props.animationData.callsFromCommandsUp.includes(floor)) {\n            this.props.animationData.callsFromCommandsUp.splice(this.props.animationData.callsFromCommandsUp.indexOf(floor), 1)\n        }\n\n        if (this.props.animationData.callsFromCommandsDown.includes(floor)) {\n            this.props.animationData.callsFromCommandsDown.splice(this.props.animationData.callsFromCommandsDown.indexOf(floor), 1)\n        }\n    }\n\n    checkCalls(direction, list) {\n\n        let call\n\n        if (direction === \"up\") { call = Math.min(...list); }\n        else { call = Math.max(...list); }\n\n        console.log(\"cazzo call\")\n\n        return call;\n    }\n\n    selectFloor(direction) {\n\n        this.wasPendingCall = false; // Needed to switch off intern buttons\n\n        let newFloor = null;\n\n        // Remove current location from any list (safety check)\n        // this.removeCall(this.props.animationData.elevatorPosition); //todo dangerous?\n\n        if (direction === \"up\") {\n\n            // Check up-calls\n            if (this.props.animationData.callsToCollectUp.length > 0) {\n\n                newFloor = this.checkCalls(direction, this.props.animationData.callsToCollectUp);\n                console.log(\"cazzo 1\")\n            }\n            // If no up-calls, check pending calls above current floor\n            else if (this.props.animationData.pendingCalls.length > 0 && this.props.animationData.pendingCalls.some(x => x >= this.props.animationData.elevatorPosition)) {\n\n                newFloor = this.checkCalls(direction, this.props.animationData.pendingCalls.filter(x => x >= this.props.animationData.elevatorPosition))\n                console.log(\"cazzo 2\")\n            }\n            // If no-above pending calls, check down-calls above current floor\n            else if (this.props.animationData.callsToCollectDown.length > 0 && this.props.animationData.callsToCollectDown.some(x => x >= this.props.animationData.elevatorPosition)) {\n                newFloor = this.checkCalls(direction, this.props.animationData.callsToCollectDown.filter(x => x >= this.props.animationData.elevatorPosition))\n                console.log(\"cazzo 3\")\n            }\n\n            // Check if there are pending calls between the current and the target floor\n            if (this.props.animationData.pendingCalls.length > 0\n                && this.props.animationData.pendingCalls.some(x => x <= newFloor && x >= this.props.animationData.elevatorPosition)) {\n\n                newFloor = Math.min(...this.props.animationData.pendingCalls.filter(x => x <= newFloor && x >= this.props.animationData.elevatorPosition))\n            }\n\n        } else {\n\n            // Check down-calls\n            if (this.props.animationData.callsToCollectDown.length > 0) {\n                newFloor = this.checkCalls(direction, this.props.animationData.callsToCollectDown);\n                console.log(\"cazzo 5\")\n\n            }\n            // If no down-calls, check pending calls below current floor\n            else if (this.props.animationData.pendingCalls.length > 0 && this.props.animationData.pendingCalls.some(x => x <= this.props.animationData.elevatorPosition)) {\n                newFloor = this.checkCalls(direction, this.props.animationData.pendingCalls.filter(x => x <= this.props.animationData.elevatorPosition));\n                console.log(\"cazzo 6\")\n\n            }\n            // If no-below pending calls, check up-calls below current floor\n            else if (this.props.animationData.callsToCollectUp.length > 0 && this.props.animationData.callsToCollectUp.some(x => x <= this.props.animationData.elevatorPosition)) {\n                newFloor = this.checkCalls(direction, this.props.animationData.callsToCollectUp.filter(x => x <= this.props.animationData.elevatorPosition));\n                console.log(\"cazzo 7\")\n\n            }\n\n            // Check if there are pending calls between the current and the target floor\n            if (this.props.animationData.pendingCalls.length > 0\n                && this.props.animationData.pendingCalls.some(x => x >= newFloor && x <= this.props.animationData.elevatorPosition)) {\n\n                newFloor = Math.max(...this.props.animationData.pendingCalls.filter(x => x >= newFloor && x <= this.props.animationData.elevatorPosition))\n            }\n\n        }\n\n        // If valid newFloor, move otherwise change direction and resolve other calls\n        if ([0,1,2,3,4,5].includes(newFloor)) {\n            console.log(\"new floor cazzo \" + newFloor)\n            // Remove element from every list it is in\n            this.removeCall(newFloor);\n            this.decideMove(direction, newFloor);\n        } else {\n            // todo\n            console.log(\"no floor found\");\n            this.props.updateDirection();\n        }\n    }\n\n    decideMove(direction, floor) {\n\n        // Stop move if new floor is the same as the current floor\n        if (floor === this.props.animationData.elevatorPosition) {\n\n            // Remove floor need also its button to be switched off\n            this.props.animationData.servedFloors[floor] = 1;\n            if (this.wasPendingCall) { this.props.animationData.intServedFloors[floor] = 1;}\n\n            this.props.updateFromAnimation(floor, this.props.animationData.callsToCollectUp, this.props.animationData.callsToCollectDown,\n                                           this.props.animationData.pendingCalls, this.props.animationData.servedFloors,\n                                           this.props.animationData.callsFromCommandsUp, this.props.animationData.callsFromCommandsDown,\n                                           this.props.animationData.intServedFloors)\n        }\n\n        else if (direction === \"up\") { this.moveUp(floor) }\n\n        else  if (direction === \"down\") { this.moveDown(floor) }\n\n    }\n\n    async moveUp(floor) {\n        // todo:remove prints\n        // Close current floor\n        console.log(\"current floor \" + this.props.animationData.elevatorPosition);\n\n        await this.closeElevatorDoor(this.props.animationData.elevatorPosition);\n\n        // Set new floor to current position\n        this.props.animationData.elevatorPosition = floor;\n\n        console.log(\"new current floor \" + this.props.animationData.elevatorPosition);\n\n        // Remove floor need also its buttons to be switched off\n        this.props.animationData.servedFloors[floor] = 1;\n        if (this.wasPendingCall) { this.props.animationData.intServedFloors[floor] = 1;}\n\n        await Promise.all([this.openElevatorDoor(floor), this.update(1000)]);\n    }\n\n    async moveDown(floor) {\n        // todo complete\n\n        // Close current floor\n        console.log(\"current floor \" + this.props.animationData.elevatorPosition);\n\n        await this.closeElevatorDoor(this.props.animationData.elevatorPosition);\n\n        // Set new floor to current position\n        this.props.animationData.elevatorPosition = floor;\n\n        // Remove floor need also its button to be switched off\n        this.props.animationData.servedFloors[floor] = 1;\n        if (this.wasPendingCall) { this.props.animationData.intServedFloors[floor] = 1;}\n\n        console.log(\"new current floor \" + this.props.animationData.elevatorPosition);\n\n        await Promise.all([this.openElevatorDoor(floor), this.update(1000)]);\n}\n\n    render() {\n        return (\n            <header style={divStyle}>\n                <img id=\"0\" ref=\"fl0\" src={closedLift} className=\"Elevator-img\" />\n                <img id=\"1\" ref=\"fl1\" src={closedLift} className=\"Elevator-img\" />\n                <img id=\"2\" ref=\"fl2\" src={closedLift} className=\"Elevator-img\" />\n                <img id=\"3\" ref=\"fl3\" src={closedLift} className=\"Elevator-img\" />\n                <img id=\"4\" ref=\"fl4\" src={closedLift} className=\"Elevator-img\" />\n                <img id=\"5\" ref=\"fl5\" src={closedLift} className=\"Elevator-img\" />\n\n            </header>\n        );\n    }\n\n    componentDidMount() {\n        this.refs['fl' + this.props.animationData.elevatorPosition].src = openLift\n    }\n\n    componentDidUpdate() {\n        console.log(\"update\");\n        console.log(this.props.animationData.intServedFloors)\n\n        // Safety check to avoid infinite loops\n        if (this.props.animationData.pendingCalls.length > 0\n            || this.props.animationData.callsToCollectUp.length > 0\n            || this.props.animationData.callsToCollectDown.length > 0) {\n\n            console.log(\"dir \" + this.props.animationData.elevatorDirection);\n            this.selectFloor(this.props.animationData.elevatorDirection);\n        }\n\n        if(this.props.fetchNewInputs) {\n\n            console.log(\"update from animation because inputs not empty\")\n            this.props.updateFromAnimation(this.props.animationData.elevatorPosition, this.props.animationData.callsToCollectUp,\n                this.props.animationData.callsToCollectDown, this.props.animationData.pendingCalls, this.props.animationData.servedFloors,\n                this.props.animationData.callsFromCommandsUp, this.props.animationData.callsFromCommandsDown, this.props.animationData.intServedFloors)\n\n        }\n    }\n\n}\n\nexport default ElevatorAnimation;","import React, {Component} from 'react';\nimport upButton from \"./upButton.svg\";\nimport downButton from './downButton.svg';\nimport currentFloor from './current_floor_button.svg';\n\nconst divStyle = {\n    padding: '10px',\n};\n\nconst myRow = {\n    position: 'relative',\n};\n\n// todo: meglio togliere le classi dal css e mettere gli stili dei tre bottoni (down up e highlighted) qui?\n\nclass UpDownCommand extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    handleClick = e => {\n        if(e.target.attributes.options.value === \"up\") {\n            // Switch on button\n            this.refs.up.style.opacity = 0.5; // todo: c'è un modo più elegante con set() ?\n\n        } else {\n            // Switch on button\n            this.refs.down.style.opacity = 0.5; // todo: c'è un modo più elegante con set() ?\n        }\n\n        // Update parent component\n        this.props.update(e.target.attributes.options.value, this.props.id);\n    }\n\n    render() {\n        return (\n            <header style={divStyle}>\n                    <div style={myRow}>\n                        <img ref=\"baseUp\" src={upButton} className=\"Up-Button\"/>\n                        <img ref=\"up\" src={currentFloor} className=\"Highlighted-Up-Button\" options=\"up\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                    </div>\n                    <div style={myRow}>\n                        <img ref=\"baseDown\" src={downButton} className=\"Down-Button\"/>\n                        <img ref=\"down\" src={currentFloor} className=\"Highlighted-Down-Button\" options=\"down\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                    </div>\n            </header>\n        );\n    }\n\n    componentDidMount() {\n\n        // Floors 0 and 5 have only one direction options\n        switch (this.props.id) {\n            case 0:\n                this.refs.baseDown.remove();\n                this.refs.down.remove();\n                break\n            case 5:\n                this.refs.baseUp.remove();\n                this.refs.up.remove();\n                break\n        }\n\n        // Switch floors on call\n        if (this.props.upDownData.callsToCollectUp.includes(this.props.id)) { this.refs.up.style.opacity = 0.5; }\n        if (this.props.upDownData.callsToCollectDown.includes(this.props.id)) { this.refs.down.style.opacity = 0.5; }\n    }\n\n    componentDidUpdate() {\n\n        console.log(\"here \")\n        // Switch off served floors\n        if (this.props.upDownData.servedFloors[this.props.id]) {\n\n            // Floors 0 and 5 have only one direction options\n            switch (this.props.id) {\n                case 0:\n                    this.refs.up.style.opacity = 0\n                    break\n                case 5:\n                    this.refs.down.style.opacity = 0\n                    break\n                default:\n                    this.refs.up.style.opacity = 0;\n                    this.refs.down.style.opacity = 0;\n            }\n\n            this.props.upDownData.servedFloors[this.props.id] = 0;\n            this.props.updateSwitchButton(this.props.upDownData.servedFloors);\n        }\n    }\n}\n\nexport default UpDownCommand;","import React, {Component} from 'react';\nimport UpDownCommand from './UpDownCommand'; // name of imported component must match the component class name !\n\nconst myRow = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n};\n\nclass ElevatorCommands extends Component {\n\n    constructor(props) {\n        super(props);\n        this.inputCommandsUp = [];\n        this.inputCommandsDown = [];\n        this.isTimer = true;\n        this.time = 5000;\n    }\n\n        render() {\n        // todo se definisco come class App-header prende quelle caratteristiche\n        return (\n            <header>\n                <div className=\"container-fluid\">\n                    <div className=\"row\" style={myRow}>\n                        <UpDownCommand id={0} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                       this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                        <UpDownCommand id={1} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                        <UpDownCommand id={2} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                        <UpDownCommand id={3} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                        <UpDownCommand id={4} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                        <UpDownCommand id={5} upDownData={this.props.commandsData}\n                                       updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromCommands(servedFloors)}}\n                                       update={async (direction, newFloor) => {\n\n                                           if (direction === \"up\") {\n                                               if (this.inputCommandsUp.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsUp.push(Number(newFloor));\n                                               }\n\n                                           } else {\n\n                                               if (this.inputCommandsDown.indexOf(newFloor) < 0) {\n                                                   this.inputCommandsDown.push(Number(newFloor));\n                                               }\n                                           }\n\n                                           if (this.isTimer && this.props.startTimer) {\n                                               alert(\"Define your query within the next \" + this.time/1000 + \" sec. After that time, you will see the result\")\n                                               this.isTimer = false;\n                                               await this.collectNewInputs();\n                                           }\n                                       }}/>\n                    </div>\n                </div>\n            </header>\n        );\n    }\n\n    update() {\n\n        this.props.updateFromCommands(this.inputCommandsUp, this.inputCommandsDown)\n        this.inputCommandsUp = [];\n        this.inputCommandsDown = [];\n        this.isTimer = true;\n    }\n\n    collectNewInputs() {\n\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(this.update());\n            }, this.time);\n        });\n    }\n}\n\nexport default ElevatorCommands;","import React, {Component} from 'react';\nimport ElevatorLocation from './ElevatorLocation';\nimport ElevatorAnimation from './ElevatorAnimation';\nimport ElevatorCommands from './ElevatorCommands';\nimport openLift from \"./open_ elevator_img.jpg\";\n\nclass Extern extends Component {\n\n    constructor(props) {\n        super(props);\n        this.newInputsUp = [];\n        this.newInputsDown = [];\n        this.startCollectTimer = true;\n        this.commandCanSendNewInputs = false;\n        this.animationCanImportNewInputs = false;\n        this.receivedNewInputs = false;\n        this.state = {commandPushed: 0,\n                      elevatorMoved: 0,\n                      directionChanged: 0,\n                      stillSomeCallsToResolve: 0,\n                      propsChanged: 0,\n                      receivedInputs: false\n                     };\n    }\n\n    compare(arr1,arr2) {\n\n        if(!arr1  || !arr2) return;\n\n        let result;\n\n        arr1.forEach((e1, i ) => arr2.forEach (e2 => {\n\n                if(e1.length > 1 && e2.length){\n                    result = this.compare(e1,e2);\n                }else if(e1 !== e2 ){\n                    result = false\n                }else{\n                    result = true\n                }\n            })\n        )\n\n        return result\n\n    }\n\n    mergeCalls(callsList1, callsList2) {\n\n        let mergedList = [...new Set([...callsList1, ...callsList2])];\n\n        console.log(\"merge\")\n\n        return mergedList;\n    }\n\n    setMainDirection() {\n\n        // Invert direction when no more callsToCollect or pendingCalls above/below current position\n        if (this.props.externData.elevatorDirection === \"up\"\n            && (!this.props.externData.pendingCalls.some(x => x > this.props.externData.elevatorPosition)\n            && !this.props.externData.callsToCollectUp.some(x => x > this.props.externData.elevatorPosition)\n            && !this.props.externData.callsToCollectDown.some(x => x > this.props.externData.elevatorPosition))) {\n\n            this.props.externData.elevatorDirection = \"down\";\n            return;\n        }\n\n        if (this.props.externData.elevatorDirection === \"down\"\n            && (!this.props.externData.pendingCalls.some(x => x < this.props.externData.elevatorPosition)\n            && !this.props.externData.callsToCollectUp.some(x => x < this.props.externData.elevatorPosition)\n            && !this.props.externData.callsToCollectDown.some(x => x < this.props.externData.elevatorPosition))) {\n\n            this.props.externData.elevatorDirection = \"up\";\n            return;\n        }\n\n        // Change when extremes are reached\n        if(this.props.externData.elevatorPosition === 5) { this.props.externData.elevatorDirection = \"down\"; }\n        if(this.props.externData.elevatorPosition === 0) { this.props.externData.elevatorDirection = \"up\"; }\n\n        console.log(\"set dir \" + this.props.externData.elevatorDirection);\n\n    }\n\n    render() {\n        return (\n            <header className=\"App-body\">\n                <ElevatorLocation className=\"Extern-Component\" locationData={this.props.externData} />\n                <ElevatorAnimation className=\"Extern-Component\" animationData={this.props.externData}\n                                   fetchNewInputs={this.animationCanImportNewInputs}\n                                   updateDirection={() => { this.setMainDirection(); this.setState({directionChanged: !this.state.directionChanged}); }}\n                                   updateFromAnimation = {async (currentLocation, callsCollUp, callsCollDown, pending,\n                                                                 servedFloors, fromCommandsUp, fromCommandsDown, internServedFloors) =>\n                                    {\n                                       console.log(\"animation update\");\n\n                                       this.props.externData.elevatorPosition = currentLocation;\n\n                                        console.log(this.props.externData.callsFromCommandsDown);\n\n                                        // Get new inputs from external commands\n                                        if (this.animationCanImportNewInputs) {\n\n                                            // In case the user starts a query before the previous is finished, remove the calls that were already served by the previous call\n                                                for (let i=0; i < this.newInputsUp.length; i++ ) {\n                                                    if (servedFloors[this.newInputsUp[i]]) {\n                                                        this.newInputsUp.splice(i, 1)\n                                                    }\n                                                }\n\n                                                for (let i=0; i < this.newInputsDown.length; i++ ) {\n                                                    if (servedFloors[this.newInputsDown[i]]) {\n                                                        this.newInputsDown.splice(i, 1)\n                                                    }\n                                                }\n\n                                            this.animationCanImportNewInputs= false\n                                            this.receivedNewInputs = true\n\n                                            // Merge calls from commands (without calls already served) with the calls from the new inputs\n                                            this.props.externData.callsFromCommandsUp = this.mergeCalls(fromCommandsUp, this.newInputsUp)\n                                            this.props.externData.callsFromCommandsDown = this.mergeCalls(fromCommandsDown, this.newInputsDown)\n\n\n                                            console.log(\"got new inputs ---\")\n\n                                            console.log(this.props.externData.callsFromCommandsUp);\n                                            console.log(this.props.externData.callsFromCommandsDown);\n                                        }\n\n                                       // New lists of calls to collect are the merge of calls from commands and calls from animation\n                                       this.props.externData.callsToCollectUp = this.mergeCalls(callsCollUp, this.props.externData.callsFromCommandsUp)\n                                       this.props.externData.callsToCollectDown = this.mergeCalls(callsCollDown, this.props.externData.callsFromCommandsDown)\n\n                                       // Merge pending calls (without calls already served) with the pending calls from the internal inputs\n                                        this.props.externData.pendingCalls = this.mergeCalls(pending, this.props.externData.pendingCalls)\n\n                                        console.log(\"meeerdaaaaa----------------------------\")\n                                        console.log(this.props.externData.pendingCalls)\n\n\n                                       this.setMainDirection();\n                                       this.props.updateInternServedFloors(internServedFloors, servedFloors)\n                                    }} />\n                <ElevatorCommands className=\"Extern-Component\" commandsData={this.props.externData}\n                                  updateSwitchFromCommands={(servedFloors) => { console.log(\"now\");  this.props.externData.servedFloors = servedFloors}}\n                                  startTimer={this.startCollectTimer}\n                                  setTimer={(isTimer) => {this.startCollectTimer = isTimer}}\n                                  updateFromCommands={async (inputCommandsUp, inputCommandsDown) => {\n                                      console.log(\"get the new inputs from commands ------------------------\")\n\n                                      this.newInputsUp = inputCommandsUp\n                                      this.newInputsDown = inputCommandsDown\n\n                                      console.log(this.newInputsUp);\n                                      console.log(this.newInputsDown);\n\n                                      this.startCollectTimer = false;\n                                      this.commandCanSendNewInputs = true;\n\n                                      alert(\"Start resolution of your combination :)\")\n\n                                      this.setState({receivedInputs: !this.state.receivedInputs})\n                                  }\n                                  }/>\n            </header>\n        );\n    }\n\n    async componentDidMount() {\n\n        this.setMainDirection()\n        this.setState({directionChanged: !this.state.directionChanged});\n        console.log(\"init pos \" + this.props.externData.elevatorPosition);\n        console.log(\"init dir \" + this.props.externData.elevatorDirection);\n    }\n\n    updateFromNewInputs() {\n        console.log(\"cassuuu\")\n        this.animationCanImportNewInputs = true\n        this.props.readyToGetPendingCalls(true);\n    }\n\n    getNewInputs() {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                console.log(\"waiting ...\");\n\n                resolve(this.updateFromNewInputs());\n            }, 15000);\n        });\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n\n        console.log(\"component re-rendered -------------------------------------\")\n\n        // Start timer next time user click\n        if (this.receivedNewInputs) { console.log(\"timer can start\"); this.receivedNewInputs = false; this.startCollectTimer = true; }\n\n        // Command received new input lists than can be send to animation\n        if(this.commandCanSendNewInputs) {\n            this.commandCanSendNewInputs = false;\n            //await this.getNewInputs();\n            this.updateFromNewInputs()\n        }\n    }\n}\n\nexport default Extern;","import React, {Component} from 'react';\nimport b0 from \"./b0.svg\";\nimport b1 from \"./b1.svg\";\nimport b2 from \"./b2.svg\";\nimport b3 from \"./b3.svg\";\nimport b4 from \"./b4.svg\";\nimport b5 from \"./b5.svg\";\nimport currentFloor from \"./current_floor_button.svg\";\n\nconst rowStyle = {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n};\n\nconst containerStyle = {\n    position: 'relative',\n    minWidth: \"30%\", // todo: manually come si fa a farlo automatico? 100% che dovrebbe essere la width del parent non funziona\n    backgroundColor: '#4F5766',\n};\n\nclass InternPanel extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    handleClick = e => {\n\n        // Switch on button\n        this.refs['highlighted' + e.target.id].style.opacity = 0.5 // todo: c'è un modo più elegante con set() ?\n\n        // Update parent component\n        this.props.update(e.target.id);\n    }\n\n    render() {\n        return (\n            <header>\n                <div className=\"container-fluid\" style={containerStyle}>\n                    <div className=\"row\" style={rowStyle}>\n                        <img src={b4} className=\"Panel-Button\" />\n                        <img id={4} ref=\"highlighted4\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                        <img src={b5} className=\"Panel-Button\" />\n                        <img id={5} ref=\"highlighted5\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                    </div>\n                    <div className=\"row\" style={rowStyle}>\n                        <img src={b2} className=\"Panel-Button\" />\n                        <img id={2} ref=\"highlighted2\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                        <img src={b3} className=\"Panel-Button\" />\n                        <img id={3} ref=\"highlighted3\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n\n                    </div>\n                    <div className=\"row\" style={rowStyle}>\n                        <img src={b0} className=\"Panel-Button\" />\n                        <img id={0} ref=\"highlighted0\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n                        <img src={b1} className=\"Panel-Button\" />\n                        <img id={1} ref=\"highlighted1\" src={currentFloor} className=\"Highlighted-Panel-Button\"\n                             onClick={(e) => {this.handleClick(e)}} />\n\n                    </div>\n                </div>\n            </header>\n        );\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n        // Switch off served floors\n        for (let i=0; i<6; i++) {\n            if (this.props.intServed[i]) {\n                this.refs['highlighted' + i].style.opacity = 0;\n                this.props.intServed[i] = 0;\n            }\n        }\n\n        this.props.updateSwitchButton(this.props.intServed);\n    }\n}\n\nexport default InternPanel;","import React, {Component} from 'react';\nimport InternPanel from './InternPanel';\n\nclass Intern extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <header className=\"App-body\">\n                <div className=\"myParagraph\"> Start the simulation by calling the elevator from the extern, at any floor. Specify any combination of calls and enjoy the resulting motion...</div>\n                <InternPanel internPanelData={this.props.internData} update={(id) => { this.props.updatePendingCalls(id) }}\n                             updateSwitchButton={(servedFloors) => { this.props.updateSwitchFromIntern(servedFloors) }}\n                             intServed={this.props.internServed} />\n            </header>\n        );\n    }\n}\n\nexport default Intern;","import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React, { Component } from 'react';\nimport './App.css';\nimport Extern from './Extern';\nimport Intern from './Intern';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.internInputCalls = [];\n        this.internServedFloorsForIntern = {0: null, 1: null, 2: null, 3: null, 4: null, 5: null};\n        this.internServedFloorsForAnimation = {0: null, 1: null, 2: null, 3: null, 4: null, 5: null};\n        // Set initial state\n        this.state = {\n            elevatorPosition: 0,\n            elevatorDirection: \"up\", // default direction is UP\n            pendingCalls: [],\n            callsToCollectUp: [],\n            callsToCollectDown: [],\n            callsFromCommandsUp: [],\n            callsFromCommandsDown: [],\n            servedFloors: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null}, // dictionary floors (id: ifServed) -> 0 means yes (switch off) / 1 means no (switch on)\n            intServedFloors: {0: null, 1: null, 2: null, 3: null, 4: null, 5: null}\n        };\n    }\n\n    render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Elevator Simulation\n        </header>\n        <div className=\"App-body\">\n          <div className=\"container-fluid\">\n            <div className=\"row row-eq-height\">\n              <div className=\"col-sm-7\">\n                <Extern externData={this.state} readyToGetPendingCalls={ (isReady) => { if (isReady) {\n                                                                                             console.log(\"ready to get pending\")\n                                                                                             this.setState({pendingCalls: this.internInputCalls})\n                                                                                       }\n                                    }}\n                        updateInternServedFloors={(internServedFloors, servedFloors) => {\n\n                            // Check which pendingCall has been served\n                            console.log(\"pending without served \")\n                            console.log(internServedFloors)\n                            this.internServedFloorsForIntern = internServedFloors;\n                            this.setState({servedFloors: servedFloors, internServedFloors: this.internServedFloorsForAnimation })\n\n                        }} />\n              </div>\n              <div className=\"col-sm-5\">\n                <Intern internData={this.state} updatePendingCalls={(id) => { // Get input calls from intern panel\n                                                                              if (this.internInputCalls.indexOf(Number(id)) < 0) {\n                                                                              this.internInputCalls.push(Number(id)) }}}\n                        updateSwitchFromIntern={(servedFloors) => { this.internServedFloorsForAnimation = servedFloors }}\n                        internServed={this.internServedFloorsForIntern}/>\n              </div>\n            </div>\n          </div>\n        </div>\n        <span className=\"App-footer\">\n            Created by Francesca Monzeglio within a Discrete Event Systems Project\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}